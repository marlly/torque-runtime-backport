<project name="Torque" default="main" basedir=".">
  <!--
    Note - You should not have to edit this file. 
    
    Instead, if calling build-torque.xml directly, edit the build.properties
    that is in the same directory. If calling build-torque.xml via another
    build file, you can also use the build.properties in the same directory,
    or set the property torque.contextProperties to the file
    to use in place of build.properties (e.g. project.properties).
  -->

  <!--
    For us to load the default.properties from the classpath, we need to bootstrap.
    To know the right lib.dir for the torque-classpath, we need to manually 
    figure out torque.lib.dir, but to do that, we need to manually figure
    out torque.contextProperties and load that so that any old configurations
    still work propertly. Then we can go on and do the rest of the mappings via
    old.properties.
   -->
  <property name="build.properties" value="build.properties"/>
  <property name="torque.contextProperties" value="${build.properties}"/>
  <property file="${torque.contextProperties}"/>
  <property name="lib.dir" value="lib"/>
  <property name="torque.lib.dir" value="${lib.dir}"/>

  <!--
    Build the classpath. Specifically point to each file we're including to avoid 
    version conflicts in the case of the torque.lib.dir being something like lib.repo.
    However, we still need to pull in the user's database driver and since we don't
    know which jar that will be, after we've got all of our specific, version-safe jars, 
    do a general inclusion of the torque.lib.dir to catch any drivers.
  -->
  <path id="torque-classpath">
    <pathelement location="${torque.lib.dir}/commons-beanutils-1.4-dev-20020724"/>
    <pathelement location="${torque.lib.dir}/commons-collections-2.0.jar"/>
    <pathelement location="${torque.lib.dir}/commons-configuration-1.0-dev.jar"/>
    <pathelement location="${torque.lib.dir}/commons-jdbc2pool-1.0-dev.jar"/>
    <pathelement location="${torque.lib.dir}/commons-lang-1.0-dev-20020716.jar"/>
    <pathelement location="${torque.lib.dir}/commons-pool-1.0.jar"/>
    <pathelement location="${torque.lib.dir}/jcs-1.0-dev.jar"/>
    <pathelement location="${torque.lib.dir}/jdbc-2.0.jar"/>
    <pathelement location="${torque.lib.dir}/jndi-1.2.1.jar"/>
    <pathelement location="${torque.lib.dir}/log4j-1.1.3.jar"/>
    <pathelement location="${torque.lib.dir}/stratum-1.0-b3-dev.jar"/>
    <pathelement location="${torque.lib.dir}/tomcat-naming-1.0.jar"/>
    <pathelement location="${torque.lib.dir}/torque-3.0-b4-dev.jar"/>
    <pathelement location="${torque.lib.dir}/velocity-1.3.jar"/>
    <pathelement location="${torque.lib.dir}/village-1.5.3.jar"/>
    <pathelement location="${torque.lib.dir}/xercesImpl-2.0.2.jar"/>
    <pathelement location="${torque.lib.dir}/xmlParserAPIs-2.0.2.jar"/>
    <fileset dir="${torque.lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <!--
    The default.properties file will map old properties to the new ones along
    with setting the corret defaults.
  -->
  <property
    classpathref="torque-classpath"
    resource="org/apache/torque/default.properties"/>

  <!--
    Do forward declarations of all of our tasks to 
    centralize them and clean up the targets.
  -->
  <taskdef
    name="torque-data-model"
    classpathref="torque-classpath"
    classname="org.apache.torque.task.TorqueDataModelTask"/>
  <taskdef
    name="torque-data-dump"
    classpathref="torque-classpath"
    classname="org.apache.torque.task.TorqueDataDumpTask"/>
  <taskdef
    name="torque-data-sql"
    classpathref="torque-classpath"
    classname="org.apache.torque.task.TorqueDataSQLTask"/>
  <taskdef
    name="torque-doc"
    classpathref="torque-classpath"
    classname="org.apache.torque.task.TorqueDocumentationTask"/>
  <taskdef
    name="torque-jdbc-transform"
    classpathref="torque-classpath"
    classname="org.apache.torque.task.TorqueJDBCTransformTask"/>
  <taskdef
    name="torque-sql"
    classpathref="torque-classpath"
    classname="org.apache.torque.task.TorqueSQLTask"/>
  <taskdef
    name="torque-sql-exec"
    classpathref="torque-classpath"
    classname="org.apache.torque.task.TorqueSQLExec"/>
  <taskdef
    name="torque-sql-transform"
    classpathref="torque-classpath"
    classname="org.apache.torque.task.TorqueSQLTransformTask"/>

  <!-- ================================================================ -->
  <!-- M A I N  T A R G E T                                             -->
  <!-- ================================================================ -->
  <!-- This default target will run all the targets that generate       -->
  <!-- source. You will probably only run this target once then         -->
  <!-- call individual targets as necessary to update your sources      -->
  <!-- when you change your XML schema.                                 -->
  <!-- ================================================================ -->

  <target
    name="main"
    description="==> generates sql + om classes">

    <antcall target="sql"/>
    <antcall target="om"/>
  </target>


  <!-- ================================================================ -->
  <!-- C H E C K  U S E C L A S S P A T H                               -->
  <!-- ================================================================ -->
  <!-- Temporary hack around the propertiesUtil bug. Should             -->
  <!-- be fixed soon.                                                   -->
  <!-- ================================================================ -->

  <target name="check-use-classpath">
    <condition property="torque.internal.useClasspath">
      <equals arg1="${torque.useClasspath}" arg2="true"/>
    </condition>
  </target>

  <!-- ================================================================ -->
  <!-- G E N E R A T E  P R O J E C T  S Q L                            -->
  <!-- ================================================================ -->
  <!-- Generate the SQL for your project, These are in addition         -->
  <!-- to the base Turbine tables! The tables you require for your      -->
  <!-- project should be specified in project-schema.xml.               -->
  <!-- ================================================================ -->

  <target
    name="sql"
    depends="check-use-classpath"
    description="==> generates the SQL for your project">

    <echo message="+------------------------------------------+"/>
    <echo message="|                                          |"/>
    <echo message="| Generating SQL for YOUR Torque project!  |"/>
    <echo message="| Woo hoo!                                 |"/>
    <echo message="|                                          |"/>
    <echo message="+------------------------------------------+"/>

    <antcall target="sql-classpath"/>
    <antcall target="sql-template"/>
  </target>

  <target name="sql-classpath" if="torque.internal.useClasspath">
    <torque-sql
      basePathToDbProps="sql/base/"
      contextProperties="${torque.contextProperties}"
      controlTemplate="${torque.template.sql}"
      idTableXMLFile="${torque.idTableXMLFile}"
      outputDirectory="${torque.sql.dir}"
      outputFile="report.${torque.project}.sql.generation"
      sqldbmap="${torque.sql.dir}/sqldb.map"
      targetDatabase="${torque.database}"
      useClasspath="${torque.useClasspath}">
      <fileset dir="${torque.schema.dir}">
        <include name="*-schema.xml"/>
      </fileset>
    </torque-sql>
  </target>

  <target name="sql-template" unless="torque.internal.useClasspath">
    <torque-sql
      basePathToDbProps="sql/base/"
      contextProperties="${torque.contextProperties}"
      controlTemplate="${torque.template.sql}"
      idTableXMLFile="${torque.idTableXMLFile}"
      outputDirectory="${torque.sql.dir}"
      outputFile="report.${torque.project}.sql.generation"
      sqldbmap="${torque.sql.dir}/sqldb.map"
      targetDatabase="${torque.database}"
      templatePath="${torque.templatePath}">
      <fileset dir="${torque.schema.dir}">
        <include name="*-schema.xml"/>
      </fileset>
    </torque-sql>
  </target>

  <!-- ================================================================ -->
  <!-- G E N E R A T E   D O C S                                        -->
  <!-- ================================================================ -->
  <!-- Generates documentation to                                       -->
  <!-- ${torque.doc.dir}/project-schema.html                            -->
  <!-- ================================================================ -->


  <target
    name="doc"
    description="==> generates documentation for your datamodel">

    <echo message="+------------------------------------------+"/>
    <echo message="|                                          |"/>
    <echo message="| Generating docs for YOUR datamodel!      |"/>
    <echo message="| Woo hoo!                                 |"/>
    <echo message="|                                          |"/>
    <echo message="+------------------------------------------+"/>

    <torque-doc
      contextProperties="${torque.contextProperties}"
      controlTemplate="${torque.template.doc}"
      outputDirectory="${torque.doc.dir}"
      outputFile="report.${torque.project}.doc.generation"
      outputFormat="${torque.doc.format}"
      sqldbmap="${torque.sql.dir}/sqldb.map"
      templatePath="${torque.templatePath}"
      useClasspath="${torque.useClasspath}">
      <fileset dir="${torque.schema.dir}">
        <include name="*-schema.xml"/>
      </fileset>
    </torque-doc>
  </target>

  <!-- ================================================================ -->
  <!-- C R E A T E  T A R G E T  D A T A B A S E                        -->
  <!-- ================================================================ -->
  <!-- Create the target database by executing a generated script       -->
  <!-- that is capable of performing the task.                          -->
  <!-- ================================================================ -->

  <target
    name="create-db"
    unless="database.manual.creation"
    description="==> generates the target database">

    <torque-data-model
      controlTemplate="${torque.template.sqlDbInit}"
      outputDirectory="${torque.sql.dir}"
      outputFile="create-db.sql"
      targetDatabase="${torque.database}"
      templatePath="${torque.templatePath}"
      useClasspath="${torque.useClasspath}">
      <fileset dir="${torque.schema.dir}">
        <include name="*-schema.xml"/>
      </fileset>
    </torque-data-model>

    <echo>
      Executing the create-db.sql script ...
    </echo>

    <sql
      autocommit="true"
      driver="${torque.database.driver}"
      onerror="continue"
      password="${torque.database.password}"
      src="${torque.sql.dir}/create-db.sql"
      url="${torque.database.createUrl}"
      userid="${torque.database.user}">
      <classpath refid="torque-classpath"/>
    </sql>
  </target>

  <!-- ================================================================ -->
  <!-- I N S E R T  S I N G L E  S Q L  F I L E S                       -->
  <!-- ================================================================ -->

  <target
    name="insert-sql">

    <torque-sql-exec
      autocommit="true"
      driver="${torque.database.driver}"
      onerror="continue"
      password="${torque.database.password}"
      sqldbmap="${torque.sql.dir}/sqldb.map"
      srcDir="${torque.sql.dir}"
      url="${buildDatabaseUrl}"
      userid="${torque.database.user}">
      <classpath refid="torque-classpath"/>
    </torque-sql-exec>
  </target>

  <!-- ================================================================ -->
  <!-- J D B C  TO  X M L                                               -->
  <!-- ================================================================ -->

  <target
    name="jdbc"
    description="==> jdbc to xml">

    <echo message="+-----------------------------------------------+"/>
    <echo message="|                                               |"/>
    <echo message="| Generating XML from JDBC connection !         |"/>
    <echo message="| Woo hoo!                                      |"/>
    <echo message="|                                               |"/>
    <echo message="+-----------------------------------------------+"/>

    <torque-jdbc-transform
      dbDriver="${torque.database.driver}"
      dbPassword="${torque.database.password}"
      dbSchema="${databaseSchema}"
      dbUrl="${torque.database.url}"
      dbUser="${torque.database.user}"
      outputFile="${torque.schema.dir}/schema.xml"
      sameJavaName="${sameJavaName}"
    />
  </target>

  <!-- ================================================================ -->
  <!-- Generate SQL from XML data file                                  -->
  <!-- ================================================================ -->

  <target
    name="datasql"
    description="==> generates sql from data xml">

    <echo message="+-----------------------------------------------+"/>
    <echo message="|                                               |"/>
    <echo message="| Generating SQL from data XML !                |"/>
    <echo message="| Woo hoo!                                      |"/>
    <echo message="|                                               |"/>
    <echo message="+-----------------------------------------------+"/>

    <torque-data-sql
      contextProperties="${torque.contextProperties}"
      controlTemplate="${torque.template.dataSql}"
      dataDTD="${torque.schema.dir}/${torque.project}-data.dtd"
      dataXmlFile="${torque.schema.dir}/${torque.project}-data.xml"
      outputDirectory="${torque.output.dir}"
      outputFile="${torque.project}-data.sql"
      sqldbmap="${torque.sql.dir}/sqldb.map"
      targetDatabase="${torque.database}"
      templatePath="${torque.templatePath}"
      useClasspath="${torque.useClasspath}"
      xmlFile="${torque.schema.dir}/${torque.project}-schema.xml"
    />
  </target>

  <!-- ================================================================ -->
  <!-- G E N E R A T E   I D   B R O K E R   I N I T   S Q L            -->
  <!-- ================================================================ -->

  <target
    name="id-table-init-sql">

    <echo message="+------------------------------------------+"/>
    <echo message="|                                          |"/>
    <echo message="| Generating initialization SQL            |"/>
    <echo message="| for ID Broker system!                    |"/>
    <echo message="|                                          |"/>
    <echo message="+------------------------------------------+"/>

    <torque-sql
      contextProperties="${torque.contextProperties}"
      controlTemplate="${torque.template.idTable}"
      outputDirectory="${torque.sql.dir}"
      outputFile="${torque.database}-id-table-init.sql"
      sqldbmap="${torque.sql.dir}/sqldb.map"
      suffix="-idtable-init"
      targetDatabase="${torque.database}"
      templatePath="${torque.templatePath}"
      useClasspath="${torque.useClasspath}">
      <fileset dir="${torque.schema.dir}">
        <include name="*-schema.xml"/>
        <exclude name="id-table-schema.xml"/>
      </fileset>
    </torque-sql>
  </target>

  <!-- ================================================================ -->
  <!-- Dump data from database into xml file                            -->
  <!-- ================================================================ -->

  <target
    name="datadump"
    description="==> dump data from database into xml file">

    <echo message="+-----------------------------------------------+"/>
    <echo message="|                                               |"/>
    <echo message="| Dumping the data from database into XML       |"/>
    <echo message="| Woo hoo!                                      |"/>
    <echo message="|                                               |"/>
    <echo message="+-----------------------------------------------+"/>

    <torque-data-dump
      contextProperties="${torque.contextProperties}"
      controlTemplate="${torque.template.dataDump}"
      databaseDriver="${torque.database.driver}"
      databaseName="${databaseName}"
      databaseUrl="${torque.database.url}"
      databaseUser="${torque.database.user}"
      databasePassword="${torque.database.password}"
      outputDirectory="${torque.output.dir}"
      outputFile="report.${torque.project}.datadump.generation"
      templatePath="${torque.templatePath}"
      useClasspath="${torque.useClasspath}"
      xmlFile="${torque.schema.dir}/${torque.project}-schema.xml"
    />
  </target>

  <!-- ================================================================ -->
  <!-- G E N E R A T E  P R O J E C T  D A T A  D T D                   -->
  <!-- ================================================================ -->
  <!-- Generate the DATA DTD for your project                           -->
  <!-- ================================================================ -->

  <target
    name="datadtd"
    description="==> generates the DATA DTD for your project">

    <echo message="+-----------------------------------------------+"/>
    <echo message="|                                               |"/>
    <echo message="| Generating Data DTD for YOUR Turbine project! |"/>
    <echo message="| Woo hoo!                                      |"/>
    <echo message="|                                               |"/>
    <echo message="+-----------------------------------------------+"/>

    <torque-data-model
      contextProperties="${torque.contextProperties}"
      controlTemplate="${torque.template.dataDtd}"
      outputDirectory="${torque.output.dir}"
      outputFile="report.${torque.project}.datadtd.generation"
      templatePath="${torque.templatePath}"
      useClasspath="${torque.useClasspath}"
      xmlFile="${torque.schema.dir}/${torque.project}-schema.xml"
    />
  </target>

  <!-- ================================================================ -->
  <!-- G E N E R A T E  P R O J E C T  P E E R  B A S E D  O M          -->
  <!-- ================================================================ -->
  <!-- Generate the Peer-based object model for your project.           -->
  <!-- These are in addition to the base Turbine OM!                    -->
  <!-- ================================================================ -->

  <target
    name="om"
    depends="check-use-classpath"
    description="==> generates the Peer-based object model for your project">

    <echo message="+------------------------------------------+"/>
    <echo message="|                                          |"/>
    <echo message="| Generating Peer-based Object Model for   |"/>
    <echo message="| YOUR Turbine project! Woo hoo!           |"/>
    <echo message="|                                          |"/>
    <echo message="+------------------------------------------+"/>

    <antcall target="om-classpath"/>
    <antcall target="om-template"/>
    <!-- antcall target="zip-base-om"/ -->
  </target>

  <target name="om-classpath" if="torque.internal.useClasspath">
    <torque-data-model
      contextProperties="${torque.contextProperties}"
      controlTemplate="${torque.template.om}"
      outputDirectory="${torque.java.dir}"
      outputFile="report.${torque.project}.om.generation"
      targetDatabase="${torque.database}"
      targetPackage="${targetPackage}"
      useClasspath="${torque.useClasspath}">
      <fileset dir="${torque.schema.dir}">
        <include name="*-schema.xml"/>
        <exclude name="id-table-schema.xml"/>
      </fileset>
    </torque-data-model>
  </target>

  <target name="om-template" unless="torque.internal.useClasspath">
    <torque-data-model
      contextProperties="${torque.contextProperties}"
      controlTemplate="${torque.template.om}"
      outputDirectory="${torque.java.dir}"
      outputFile="report.${torque.project}.om.generation"
      targetDatabase="${torque.database}"
      targetPackage="${targetPackage}"
      templatePath="${torque.templatePath}">
      <fileset dir="${torque.schema.dir}">
        <include name="*-schema.xml"/>
        <exclude name="id-table-schema.xml"/>
      </fileset>
    </torque-data-model>
  </target>
  
  <target
    name="zip-base-om"
    if="torque.basezip.dir"
    description="Moves BaseXxx om files to separate jar and out of the source tree">

    <echo message="+------------------------------------------+"/>
    <echo message="|                                          |"/>
    <echo message="| Zipping the Base Object Model files for  |"/>
    <echo message="| YOUR Turbine project! Woo hoo!           |"/>
    <echo message="|                                          |"/>
    <echo message="+------------------------------------------+"/>

    <jar
      jarfile="${torque.basezip.dir}/${torque.project}-om-base.jar"
      basedir="${torque.java.dir}"
      includes="${targetPackage}/${basePrefix}*.java"
    />

    <delete>
      <fileset
        dir="${torque.java.dir}"
        includes="${targetPackage}/${basePrefix}*.java"
      />
    </delete>
  </target>

  <!-- =================================================================== -->
  <!-- C O M P I L E  O M                                                  -->
  <!-- =================================================================== -->

  <target
    name="compile"
    description="==> compiles the OM classes">

    <mkdir dir="${torque.compile.build.dir}"/>

    <javac
      debug="${torque.compile.debug}"
      deprecation="${torque.compile.deprecation}"
      destdir="${torque.compile.build.dir}"
      optimize="${torque.compile.optimize}"
      srcdir="${torque.compile.src.dir}">
      <classpath refid="torque-classpath"/>
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- S Q L  T O  X M L                                                   -->
  <!-- =================================================================== -->
  <!-- Create an xml schema from an sql schema.                            -->
  <!--                                                                     -->
  <!--  inputFile: The input sql file. This must be valid sql file but     -->
  <!--             it not not be in any specific format.                   -->
  <!-- outputFile: The file where the xml schema will be written           -->
  <!-- =================================================================== -->

  <target
    name="sql2xml"
    description="==> creates an xml schema from an sql schema">

    <torque-sql-transform
      inputFile="${torque.schema.dir}/schema.sql"
      outputFile="${torque.schema.dir}/schema.xml"
    />
  </target>

  <!-- ================================================================== -->
  <!-- J A V A D O C                                                      -->
  <!-- ================================================================== -->

  <target
    name="javadocs"
    description="==> generates the API documentation">

    <mkdir dir="${torque.javadoc.dir}"/>

    <javadoc
      author="true"
      destdir="${torque.javadoc.dir}"
      packagenames="${targetPackage}.*"
      private="true"
      sourcepath="${torque.java.dir}"
      use="true"
      version="true">
      <classpath refid="torque-classpath"/>
    </javadoc>
  </target>

  <!-- =================================================================== -->
  <!-- O J B   S T U F F                                                   -->
  <!-- =================================================================== -->

  <target
    name="ojb-repository">

    <echo message="+------------------------------------------+"/>
    <echo message="|                                          |"/>
    <echo message="| Generating OJB repository                |"/>
    <echo message="|                                          |"/>
    <echo message="+------------------------------------------+"/>

    <torque-data-model
      contextProperties="${torque.contextProperties}"
      controlTemplate="${torque.template.ojb}"
      targetDatabase="${torque.database}"
      targetPackage="${targetPackage}"
      outputDirectory="${torque.ojb.dir}"
      outputFile="report.${torque.project}.ojb.generation"
      sqldbmap="${torque.sql.dir}/sqldb.map"
      templatePath="${torque.templatePath}"
      useClasspath="${torque.useClasspath}">
      <fileset dir="${torque.schema.dir}">
        <include name="*-schema.xml"/>
      </fileset>
    </torque-data-model>
  </target>

  <target
    name="ojb-model">

    <echo message="+------------------------------------------+"/>
    <echo message="|                                          |"/>
    <echo message="| Generating OJB model                     |"/>
    <echo message="|                                          |"/>
    <echo message="+------------------------------------------+"/>

    <torque-data-model
      contextProperties="${torque.contextProperties}"
      controlTemplate="${torque.template.ojbModel}"
      targetDatabase="${torque.database}"
      targetPackage="${targetPackage}"
      outputDirectory="${torque.ojb.dir}"
      outputFile="report.${torque.project}.ojb.generation"
      sqldbmap="${torque.sql.dir}/sqldb.map"
      templatePath="${torque.templatePath}"
      useClasspath="${torque.useClasspath}">
      <fileset dir="${torque.schema.dir}">
        <include name="*-schema.xml"/>
      </fileset>
    </torque-data-model>
  </target>

  <!--
    Deprecated targets with the project- prefix.
  -->
  <target name="project-sql">
    <echo message="The 'project-sql' target is deprecated. Please use the 'sql' target instead."/>
    <antcall target="sql"/>
  </target>
  <target name="project-om">
    <echo message="The 'project-om' target is deprecated. Please use the 'om' target instead."/>
    <antcall target="om"/>
  </target>
  <target name="project-doc">
    <echo message="The 'project-doc' target is deprecated. Please use the 'doc' target instead."/>
    <antcall target="doc"/>
  </target>
  <target name="project-create-db">
    <echo message="The 'project-create-db' target is deprecated. Please use the 'create-db' target instead."/>
    <antcall target="create-db"/>
  </target>
  <target name="project-insert-sql">
    <echo message="The 'project-insert-sql' target is deprecated. Please use the 'insert-sql' target instead."/>
    <antcall target="insert-sql"/>
  </target>
  <target name="project-jdbc">
    <echo message="The 'project-jdbc' target is deprecated. Please use the 'jdbc' target instead."/>
    <antcall target="jdbc"/>
  </target>
  <target name="project-datasql">
    <echo message="The 'project-datasql' target is deprecated. Please use the 'datasql' target instead."/>
    <antcall target="datasql"/>
  </target>
  <target name="project-datadump">
    <echo message="The 'project-datadump' target is deprecated. Please use the 'datadump' target instead."/>
    <antcall target="datadump"/>
  </target>
  <target name="project-datadtd">
    <echo message="The 'project-datadtd' target is deprecated. Please use the 'datadtd' target instead."/>
    <antcall target="datadtd"/>
  </target>
  <target name="project-sql2xml">
    <echo message="The 'project-sql2xml' target is deprecated. Please use the 'sql2xml' target instead."/>
    <antcall target="sql2xml"/>
  </target>
  <target name="project-ojb-repository">
    <echo message="The 'project-ojb-repository' target is deprecated. Please use the 'ojb-repository' target instead."/>
    <antcall target="ojb-repository"/>
  </target>
  <target name="project-ojb-model">
    <echo message="The 'project-obj-model' target is deprecated. Please use the 'ojb-model' target instead."/>
    <antcall target="ojb-model"/>
  </target>

</project>

