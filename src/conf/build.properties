# -------------------------------------------------------------------
#
# T O R Q U E  C O N F I G U R A T I O N  F I L E
#
# -------------------------------------------------------------------
# This file contains the most commonly used properties. For a
# a complete list of build properties, please refer to:
#   http://jakarta.apache.org/turbine/torque/properties-reference.xml
# -------------------------------------------------------------------


# -------------------------------------------------------------------
#
#  P R O J E C T
#
# -------------------------------------------------------------------
# This is the name of your Torque project. Your non-Java generated 
# files will be named using the project name selected below. If your
# project=killerapp then you will have a generated:
#
#   killerapp-schema.sql
#
# The custom is then to also rename your project XML schema from
# project-schema.xml to killerapp-schema.xml. This is required 
# for a few targets such as datasql, datadump, and datadtd.
# -------------------------------------------------------------------

torque.project = bookstore


# -------------------------------------------------------------------
#
#  T A R G E T  D A T A B A S E
#
# -------------------------------------------------------------------
# This is the target database, only considered when generating
# the SQL for your Turbine project. Your possible choices are:
#
#   axion, cloudscape, db2, db2400, hypersonic, interbase, mssql,
#   mysql, oracle, postgresql, sapdb, sybase
# -------------------------------------------------------------------

torque.database = postgresql


# -------------------------------------------------------------------
#
#  O B J E C T  M O D E L  I N F O R M A T I O N
#
# -------------------------------------------------------------------
# These settings will allow you to customize the way your
# Peer-based object model is created.
# -------------------------------------------------------------------
# addGetByNameMethod
#   If true, Torque adds methods to get database fields by name/position.
#
# addIntakeRetrievable
#   If true, the data objects will implement Intake's Retrievable 
#   interface
#
# addSaveMethod
#   If true, Torque adds tracking code to determine how to save objects.
#
# addTimeStamp
#   If true, Torque true puts time stamps in generated om files.
#
# basePrefix
#   A string to pre-pend to the file names of base data and peer objects.
#
# complexObjectModel
#   If true, Torque generates data objects with collection support and 
#   methods to easily retreive foreign key relationships.
#
# overloadKeySetters
#   If false, this prevents overloading of the setter method for
#   primary/foreign keys.  This is useful when working with broken
#   JavaBean implementations.
#
# targetPackage
#   Sets the Java package the om files will generated to, e.g. 
#   "com.company.project.om".
#
# useClasspath
#   If true, Torque will not look in the <code>templatePath</code> directory,
#   for templates, but instead load them from the classpath, allowing you to 
#   use Torque without extracted it from the jar.
#
# useManagers
#   If true, Torque will generate Manager classes that use JCS for caching.
#   Still considered experimental.
# -------------------------------------------------------------------

torque.targetPackage = org.apache.torque

torque.addGetByNameMethod = true
torque.addIntakeRetrievable = false
torque.addSaveMethod = true
torque.addTimeStamp = true
torque.basePrefix = Base
torque.complexObjectModel = true
torque.overloadKeySetters = true
torque.useClasspath = false
torque.useManagers = false


# -------------------------------------------------------------------
#
#  D A T A B A S E  S E T T I N G S
#
# -------------------------------------------------------------------
# JDBC connection settings. This is used by the JDBCToXML task that
# will create an XML database schema from JDBC metadata. These
# settings are also used by the SQL Ant task to initialize your
# Turbine system with the generated SQL.
#
# sameJavaName
#   If true, the JDBC task will set the javaName attribute for the tables 
#   and columns to be the same as SQL name.
# -------------------------------------------------------------------

torque.database.createUrl = jdbc:postgresql://127.0.0.1:5432/template1
torque.database.buildUrl = jdbc:postgresql://127.0.0.1:5432/bookstore
torque.database.url = jdbc:postgresql://127.0.0.1:5432/bookstore
torque.database.driver = org.postgresql.Driver
torque.database.user = jvanzyl
torque.database.password =
torque.database.host = 127.0.0.1

torque.sameJavaName = false
