package ${package};

import java.util.Collection;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.apache.ojb.broker.*;
import org.apache.ojb.broker.query.*;

/**
 * ${basePrefix}${table.JavaName}Manager.
#if ($addTimeStamp)
 * This class was autogenerated by Torque on:
 *
 * [$now]
 *
#end
 */
public class ${basePrefix}${table.JavaName}Manager
{
    /** Logging class from commons.logging */
    private static Log log = LogFactory.getLog(${basePrefix}${table.JavaName}Manager.class);            

    protected PersistenceBroker getBroker() { 
        return PersistenceBrokerFactory.defaultPersistenceBroker();
    }

    protected ${table.JavaName} getObjectByCriteria(Criteria crit) {
        PersistenceBroker broker = getBroker();
        Query query = new QueryByCriteria(${table.JavaName}.class, crit);
        ${table.JavaName} object = (${table.JavaName}) broker.getObjectByQuery(query);
        broker.close();
        return object;
    }

    protected Collection getCollectionByCriteria(Criteria crit) {
        PersistenceBroker broker = getBroker();
        Query query = new QueryByCriteria(${table.JavaName}.class, crit);
        Collection coll = broker.getCollectionByQuery(query);
        broker.close();
        return coll;
    }

    public void save(${table.JavaName} object) {
        PersistenceBroker broker = getBroker();
        try {
            broker.beginTransaction();
            broker.store(object);
            broker.commitTransaction();
        } catch (PersistenceBrokerException ex) {
            broker.abortTransaction();
            log.error("Error saving object", ex);
        } finally {
            broker.close();
        }
    }
    
    protected void save(PersistenceBroker broker, ${table.JavaName} object) {
        broker.store(object);
    }

    public void delete(${table.JavaName} object) {
        PersistenceBroker broker = getBroker();
        try {
            broker.beginTransaction();
            delete(broker, object);
            broker.commitTransaction();
        } catch (Throwable t) {
            broker.abortTransaction();
            log.error("could not delete object", t);
        } finally {
            broker.close();
        }
    }
    
    protected void delete(PersistenceBroker broker, ${table.JavaName} object) {
        broker.delete(object);
    }

}
