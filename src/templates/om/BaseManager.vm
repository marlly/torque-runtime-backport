#*
 * author <a href="mailto:jmcnally@collab.net">John McNally</a>
 * version $Id$
 *#

#set ($db = $table.Database)
#if ($db.Package)
    #set ($package = $db.Package)
#else
    #set ($package = $targetPackage)
#end
package ${package};

import java.util.List;

import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.om.AbstractBaseManager;
import org.apache.torque.util.Criteria;
import org.apache.torque.Torque;
import org.apache.torque.TorqueException;

/** 
 * This class manages $table.JavaName objects.  
 * This class was autogenerated by Torque #if ($addTimeStamp)on:
 *
 * [$now]
 *
#end
 * You should not use this class directly.  It should not even be
 * extended all references should be to ${table.JavaName}Manager 
 */
public abstract class $basePrefix${table.JavaName}Manager
    extends AbstractBaseManager
{
    /** The name of the manager */
    protected static String MANAGER_NAME = "${table.JavaName}Manager";

    /**
     * Retrieves an implementation of the manager, based on the settings in
     * the configuration.
     *
     * @return an implementation of ${table.JavaName}Manager.
     */
    public static ${table.JavaName}Manager getManager()
    {
        return (${table.JavaName}Manager)
            Torque.getManager(${table.JavaName}Manager.MANAGER_NAME);    
    }

    /**
     * Static accessor for the @see #getInstanceImpl().
     *
     * @return a <code>${table.JavaName}</code> value
     * @exception Exception if an error occurs
     */
    public static ${table.JavaName} getInstance()
        throws TorqueException
    {
        return getManager().getInstance();
    }

    /**
     * Static accessor for the @see #getInstanceImpl(ObjectKey).
     *
     * @param id an <code>ObjectKey</code> value
     * @return a <code>${table.JavaName}</code> value
     * @exception Exception if an error occurs
     */
    public static ${table.JavaName} getInstance(ObjectKey id)
        throws TorqueException
    {
        return getManager().getInstanceImpl(id);
    }

    /**
     * Static accessor for the @see #getInstanceImpl(ObjectKey, boolean).
     *
     * @param id an <code>ObjectKey</code> value
     * @return a <code>${table.JavaName}</code> value
     * @exception Exception if an error occurs
     */
    public static ${table.JavaName} getInstance(ObjectKey id, boolean fromCache)
        throws TorqueException
    {
        return getManager().getInstanceImpl(id, fromCache);
    }

    /**
     * Static accessor for the @see #getInstancesImpl(List).
     *
     * @param ids a <code>List</code> value
     * @return a <code>List</code> value
     * @exception Exception if an error occurs
     */
    public static List getInstances(List ids)
        throws TorqueException
    {
        return getManager().getInstancesImpl(ids);
    }

    /**
     * Static accessor for the @see #getInstancesImpl(List, boolean).
     *
     * @param ids a <code>List</code> value
     * @return a <code>List</code> value
     * @exception Exception if an error occurs
     */
    public static List getInstances(List ids, boolean fromCache)
        throws TorqueException
    {    
        return getManager().getInstancesImpl(ids, fromCache);
    }

    public static void putInstance(Persistent om)
        throws TorqueException
    {
        getManager().putInstanceImpl(om);
    }

    public static void clear()
        throws TorqueException
    {
        getManager().clearImpl();
    }

    public static boolean exists(${table.JavaName} obj)
        throws TorqueException
    {
        return getManager().existsImpl(obj);
    }

    /**
     * Creates a new <code>$basePrefix${table.JavaName}Manager</code> instance.
     *
     * @exception TorqueException if an error occurs
     */
    public $basePrefix${table.JavaName}Manager()
        throws TorqueException
    {
        setRegion("org_tigris_scarab_om_${table.JavaName}");
        setClassName("org.tigris.scarab.om.${table.JavaName}");
    }


    /**
     * Get a fresh instance of a ${table.JavaName}Manager
     */
    protected ${table.JavaName} getInstanceImpl()
        throws TorqueException
    {
        ${table.JavaName} obj = null;
        try
        {
            obj = (${table.JavaName}) getOMInstance();
        }
        catch (Exception e)
        {
            throw new TorqueException(e);
        }
        return obj;
    }


    /**
     * Get a user with the given id.
     *
     * @param id <code>ObjectKey</code> value
     */
    protected ${table.JavaName} getInstanceImpl(ObjectKey id)
        throws TorqueException
    {
        return (${table.JavaName}) getOMInstance(id);
    }

    /**
     * Get a ${table.JavaName} with the given id.
     *
     * @param id <code>ObjectKey</code> value
     * @param fromCache if true, look for cached ${table.JavaName}s before loading
     * from storage.
     */
    protected ${table.JavaName} getInstanceImpl(ObjectKey id, boolean fromCache)
        throws TorqueException
    {
        return (${table.JavaName}) getOMInstance(id, fromCache);
    }

    /**
     * Gets a list of ${table.JavaName}s based on id's.
     *
     * @param ids a List of <code>ObjectKeys</code> value
     * @return a <code>List</code> of ${table.JavaName}s
     * @exception Exception if an error occurs
     */
    protected List getInstancesImpl(List ids) 
        throws TorqueException
    {
        return getOMs(ids);
    }

    /**
     * Gets a list of ${table.JavaName}s based on id's.
     *
     * @param userIds a List of <code>ObjectKeys</code> value
     * @param fromCache if true, look for cached ${table.JavaName}s before loading
     * from storage.
     * @return a <code>List</code> of ${table.JavaName}s
     * @exception Exception if an error occurs
     */
    protected List getInstancesImpl(List ids, boolean fromCache) 
        throws TorqueException
    {
        return getOMs(ids, fromCache);
    }

    /**
     * check for a duplicate project name
     */
    protected boolean existsImpl(${table.JavaName} om)
        throws TorqueException
    {
        Criteria crit = ${table.JavaName}Peer.buildCriteria(om);
        return ${table.JavaName}Peer.doSelect(crit).size() > 0;
    }

#if ($table.isAlias())
    #set ($retrieveMethod = "retrieve${table.JavaName}ByPK")
#else
    #set ($retrieveMethod = "retrieveByPK")
#end


    protected Persistent retrieveStoredOM(ObjectKey id)
        throws TorqueException
    {
        return ${table.JavaName}Peer.${retrieveMethod}(id);
    }

    /**
     * Gets a list of ModuleEntities based on id's.
     *
     * @param moduleIds a <code>NumberKey[]</code> value
     * @return a <code>List</code> value
     * @exception Exception if an error occurs
     */
    protected List retrieveStoredOMs(List ids) 
        throws TorqueException
    {
        return ${table.JavaName}Peer.${retrieveMethod}s(ids);
    }
}
