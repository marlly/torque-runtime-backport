#*
 * author <a href="mailto:jmcnally@collab.net">John McNally</a>
 * version $Id$
 *#
#set ($interfaceName = $table.JavaName)
#if ($table.Interface)
   #set ($interfaceName = $table.Interface)
#end

#set ($db = $table.Database)
#if ($db.Package)
    #set ($package = $db.Package)
#else
    #set ($package = $targetPackage)
#end
package ${package};

import java.util.List;

import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.manager.AbstractBaseManager;
import org.apache.torque.manager.MethodResultCache;
import org.apache.torque.manager.CacheListener;
import org.apache.torque.util.Criteria;
import org.apache.torque.Torque;
import org.apache.torque.TorqueException;

/** 
 * This class manages $interfaceName objects.  
 * This class was autogenerated by Torque #if ($addTimeStamp)on:
 *
 * [$now]
 *
 #end
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to ${interfaceName}Manager 
 */
public abstract class $basePrefix${interfaceName}Manager
    extends AbstractBaseManager
{
    /** The name of the manager */
    protected static String MANAGER_NAME = "${interfaceName}Manager";

    /**
     * Retrieves an implementation of the manager, based on the settings in
     * the configuration.
     *
     * @return an implementation of ${interfaceName}Manager.
     */
    public static ${interfaceName}Manager getManager()
    {
        return (${interfaceName}Manager)
            Torque.getManager(${interfaceName}Manager.MANAGER_NAME);    
    }

    /**
     * Static accessor for the @see #getInstanceImpl().
     *
     * @return a <code>${interfaceName}</code> value
     * @exception TorqueException if an error occurs
     */
    public static ${interfaceName} getInstance()
        throws TorqueException
    {
        return getManager().getInstanceImpl();
    }

    /**
     * Static accessor for the @see #getInstanceImpl(ObjectKey).
     *
     * @param id an <code>ObjectKey</code> value
     * @return a <code>${interfaceName}</code> value
     * @exception TorqueException if an error occurs
     */
    public static ${interfaceName} getInstance(ObjectKey id)
        throws TorqueException
    {
        return getManager().getInstanceImpl(id);
    }

    /**
     * Static accessor for the @see #getInstanceImpl(ObjectKey, boolean).
     *
     * @param id an <code>ObjectKey</code> value
     * @return a <code>${interfaceName}</code> value
     * @exception TorqueException if an error occurs
     */
    public static ${interfaceName} getInstance(ObjectKey id, boolean fromCache)
        throws TorqueException
    {
        return getManager().getInstanceImpl(id, fromCache);
    }

    /**
     * Static accessor for the @see #getInstancesImpl(List).
     *
     * @param ids a <code>List</code> value
     * @return a <code>List</code> value
     * @exception TorqueException if an error occurs
     */
    public static List getInstances(List ids)
        throws TorqueException
    {
        return getManager().getInstancesImpl(ids);
    }

    /**
     * Static accessor for the @see #getInstancesImpl(List, boolean).
     *
     * @param ids a <code>List</code> value
     * @return a <code>List</code> value
     * @exception TorqueException if an error occurs
     */
    public static List getInstances(List ids, boolean fromCache)
        throws TorqueException
    {    
        return getManager().getInstancesImpl(ids, fromCache);
    }

    public static void putInstance(Persistent om)
        throws TorqueException
    {
        getManager().putInstanceImpl(om);
    }

    public static void clear()
        throws TorqueException
    {
        getManager().clearImpl();
    }

    public static boolean exists(${interfaceName} obj)
        throws TorqueException
    {
        return getManager().existsImpl(obj);
    }

    public static MethodResultCache getMethodResult()
    {
        return getManager().getMethodResultCache();
    }

    public static void addCacheListener(CacheListener listener)
    {
        getManager().addCacheListenerImpl(listener);
    }

    /**
     * Creates a new <code>$basePrefix${interfaceName}Manager</code> instance.
     *
     * @exception TorqueException if an error occurs
     */
    public $basePrefix${interfaceName}Manager()
        throws TorqueException
    {
        setClassName("${package}.${interfaceName}");
    }

    /**
     * Get a fresh instance of a ${interfaceName}Manager
     */
    protected ${interfaceName} getInstanceImpl()
        throws TorqueException
    {
        ${interfaceName} obj = null;
        try
        {
            obj = (${interfaceName}) getOMInstance();
        }
        catch (Exception e)
        {
            throw new TorqueException(e);
        }
        return obj;
    }


    /**
     * Get a ${interfaceName} with the given id.
     *
     * @param id <code>ObjectKey</code> value
     */
    protected ${interfaceName} getInstanceImpl(ObjectKey id)
        throws TorqueException
    {
        return (${interfaceName}) getOMInstance(id);
    }

    /**
     * Get a ${interfaceName} with the given id.
     *
     * @param id <code>ObjectKey</code> value
     * @param fromCache if true, look for cached ${interfaceName}s before loading
     * from storage.
     */
    protected ${interfaceName} getInstanceImpl(ObjectKey id, boolean fromCache)
        throws TorqueException
    {
        return (${interfaceName}) getOMInstance(id, fromCache);
    }

    /**
     * Gets a list of ${interfaceName}s based on id's.
     *
     * @param ids a List of <code>ObjectKeys</code> value
     * @return a <code>List</code> of ${interfaceName}s
     * @exception TorqueException if an error occurs
     */
    protected List getInstancesImpl(List ids) 
        throws TorqueException
    {
        return getOMs(ids);
    }

    /**
     * Gets a list of ${interfaceName}s based on id's.
     *
     * @param ids a List of <code>ObjectKeys</code> value
     * @param fromCache if true, look for cached ${interfaceName}s before loading
     * from storage.
     * @return a <code>List</code> of ${interfaceName}s
     * @exception TorqueException if an error occurs
     */
    protected List getInstancesImpl(List ids, boolean fromCache) 
        throws TorqueException
    {
        return getOMs(ids, fromCache);
    }

    /**
     * check for a duplicate project name
     */
    protected boolean existsImpl(${interfaceName} om)
        throws TorqueException
    {
        Criteria crit = ${table.JavaName}Peer
            .buildCriteria((${table.JavaName})om);
        return ${table.JavaName}Peer.doSelect(crit).size() > 0;
    }

#if ($table.isAlias())
    #set ($retrieveMethod = "retrieve${table.JavaName}ByPK")
#else
    #set ($retrieveMethod = "retrieveByPK")
#end


    protected Persistent retrieveStoredOM(ObjectKey id)
        throws TorqueException
    {
        return ${table.JavaName}Peer.${retrieveMethod}(id);
    }

    /**
     * Gets a list of ModuleEntities based on id's.
     *
     * @param moduleIds a <code>NumberKey[]</code> value
     * @return a <code>List</code> value
     * @exception TorqueException if an error occurs
     */
    protected List retrieveStoredOMs(List ids) 
        throws TorqueException
    {
        return ${table.JavaName}Peer.${retrieveMethod}s(ids);
    }
}
