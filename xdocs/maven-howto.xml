<?xml version="1.0"?>

<document>

  <properties>
    <title>Torque - Example Configuration for a Mavenized Project</title>
    <author email="stephenh@chase3000.com">Stephen Haberman</author>
  </properties>

  <body>

<section name="Table of Contents">

<p>
  <ol>
    <li>
      <a href="#Introduction">Introduction</a>
    </li>
    <li>
      <a href="#Installation">Installation</a>
    </li>
    <li>
      <a href="#Configuration">Configuration</a>
      <ul>
        <li>
          <a href="#project.properties">project.properties</a>
        </li>
        <li>
          <a href="#project.xml">project.xml</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="#Other Tips">Other Tips</a>
    </li>
  </ol>
</p>

</section>

<section name="Introduction">

  <p>
    Torque projects used to be built with all of the Torque elements (templates,
    property files, <code>build-torque.xml</code>, etc.) locally installed in
    each project's source tree.
  </p>

  <p>
    The advent of Maven allows Torque to be used in a much simpler manor. With
    the Maven plugin, absolutely no Torque-related resources are required to be
    locally installed in each project. Instead, Maven goals like "torque:om" are
    mapped to their respective build-torque.xml commands like "om".
  </p>
</section>

<section name="Installation">

  <p>
    Currently you must manually build the plugin by checking out Torque from CVS
    and running <code>maven plugin:deploy</code> from the
    <code>src/maven-plugin</code> directory. This will jar together the various
    plugin styles and extract it into your <code>${maven.home}/plugins</code>
    directory.
  </p>

  <p>
    In future releases, a jar will be available that you can simply drop in
    <code>${maven.home}/plugins</code>.
  </p>

</section>

<section name="Configuration">

  <p>
    The Torque Maven plugin is configured via two standard Maven files:

    <ul>
      <li><code>project.properties</code></li>
      <li><code>project.xml</code></li>
    </ul>
  </p>

<subsection name="project.properties">

  <p>
    Instead of relying on the typical <code>build.properties</code>, the Maven
    plugin uses the project-wide settings in the <code>project.properties</code>
    file.
  </p>

  <p>
    The Torque settings in <code>project.properties</code> follow the same
    format as they would in the old <code>build.properties</code> except for two
    things:
    <ul>
      <li>
        Torque should use the <code>project.properties</code> file for loading
        its settings instead of <code>build.properties</code>. This is done via
        the <code>torque.contextProperties</code> property.
      </li>
      <li>
        The various <code>torque.*.dir</code> properties are set to have Torque
        fit into the Mavenized directory structure.
      </li>
    </ul>
  </p>

  <p>
    Here is a sample configuration from <code>project.properties</code>:

<source><![CDATA[
... other project settings...

# -------------------------------------------------------------------
#
#  T O R Q U E   S E T T I N G S
#
# -------------------------------------------------------------------

torque.project = yourproject
torque.database = mysql
torque.contextProperties = project.properties
torque.runOnlyOnSchemaChange = true

torque.schema.dir = src/schema
torque.sql.dir = target/sql
torque.java.dir = src/java
torque.doc.dir = target/sql
torque.lib.dir = ${maven.repo.local}
torque.doc.format = html

# Hypothetical configuration...only need to set properties
# when we don't want the default value
torque.targetPackage = com.company.yourproject.om
torque.addGetByNameMethod = false
torque.addTimeStamp = false
torque.addIntakeRetrievable = true
torque.useManagers = true
torque.useClasspath = true

torque.database.createUrl = jdbc:mysql://localhost:3306/
torque.database.buildUrl = jdbc:mysql://localhost:3306/yourprojectdb
torque.database.url = jdbc:mysql://localhost:3306/yourprojectdb
torque.database.driver = org.gjt.mm.mysql.Driver
torque.database.user = user
torque.database.password = password
torque.database.host = localhost

torque.initialID = 1001
]]></source>

  </p>

</subsection>

<subsection name="project.xml">

  <p>
    Currently in Maven b7, you have to list all of the Torque dependencies
    within your own <code>project.xml</code> for the jars to be included in your
    project's classpath. Currently the list of Torque dependencies is:
  </p>

<source><![CDATA[
<dependencies>
  <dependency>
    <id>ant</id>
    <version>1.5</version>
  </dependency>
  <dependency>
    <id>commons-beanutils</id>
    <version>1.4.1</version>
  </dependency>
  <dependency>
    <id>commons-collections</id>
    <version>2.0</version>
    <url>http://jakarta.apache.org/commons/collections.html</url>
  </dependency>
  <dependency>
    <id>commons-configuration</id>
    <version>1.0-dev</version>
    <url>http://jakarta.apache.org/commons/</url>
  </dependency>
  <dependency>
    <id>commons-dbcp</id>
    <version>1.0-dev-20020806</version>
    <url>http://jakarta.apache.org/commons/</url>
  </dependency>
  <dependency>
    <id>commons-lang</id>
    <version>1.0</version>
    <url>http://jakarta.apache.org/commons/</url>
  </dependency>
  <dependency>
    <id>commons-logging</id>
    <version>1.0.2</version>
    <url>http://jakarta.apache.org/commons/</url>
  </dependency>
  <dependency>
    <id>commons-pool</id>
    <version>1.0</version>
    <url>http://jakarta.apache.org/commons/pool/</url>
  </dependency>
  <dependency>
    <id>jcs</id>
    <version>1.0-dev</version>
    <url>http://jakarta.apache.org/turbine/jcs/</url>
  </dependency>
  <dependency>
    <id>jdbc</id>
    <version>2.0</version>
    <url>http://java.sun.com/products/jdbc/download.html#spec</url>
  </dependency>
  <dependency>
    <id>jndi</id>
    <version>1.2.1</version>
    <url>http://java.sun.com/products/jndi/</url>
  </dependency>
  <dependency>
    <id>log4j</id>
    <version>1.2.6</version>
    <url>http://jakarta.apache.org/log4j/</url>
  </dependency>
  <dependency>
    <id>stratum</id>
    <version>1.0-b3-dev</version>
    <url>http://jakarta.apache.org/turbine/stratum/</url>
  </dependency>
  <dependency>
    <id>tomcat-naming</id>
    <version>1.0</version>
    <url>http://jakarta.apache.org/tomcat/</url>
  </dependency>
  <dependency>
    <id>velocity</id>
    <version>1.3</version>
    <url>http://jakarta.apache.org/velocity/</url>
  </dependency>
  <dependency>
    <id>village</id>
    <version>1.5.3</version>
    <url>http://share.whichever.com/index.php?SCREEN=village</url>
  </dependency>
  <dependency>
    <id>xerces</id>
    <version>2.0.2</version>
    <jar>xercesImpl-2.0.2.jar</jar>
    <url>http://xml.apache.org/xerces2-j/</url>
  </dependency>
  <dependency>
    <id>xml-apis</id>
    <version>2.0.2</version>
    <jar>xmlParserAPIs-2.0.2.jar</jar>
    <url>http://xml.apache.org/xerces2-j/</url>
  </dependency>
</dependencies>
]]></source>

</subsection>

</section>

<section name="Other Tips">

  <p>
    If you run into problems, try the following tips:

    <ul>
      <li>
        Make sure that you set the <code>torque.jar</code> property to the
        version of Torque that you are using (and hence will be in the
        <code>${maven.home}/repository/torque/jars</code> directory for the
        plugin to find).
      </li>
      <li>
        Don't place your <code>project-schema.xml</code> file in a directory
        with other files. This can lead to various DTD errors.
      </li>
    </ul>

  </p>
</section>

  </body>
</document>
