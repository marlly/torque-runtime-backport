<?xml version="1.0"?>
<!--
 Copyright 2001-2005 The Apache Software Foundation.

 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>

  <properties>
    <title>Torque Developer's Guide</title>
    <author email="jvanzyl@apache.org">Jason van Zyl</author>
    <author email="jmcnally@collab.net">John McNally</author>
    <author email="mpoeschl@marmot.at">Martin Poeschl</author>
    <author email="seade@backstagetech.com.au">Scott Eade</author>
  </properties>

  <body>

    <section name="Torque Directory Structure">

      <p>
        Here is what the Torque directory structure looks like in SVN:
      </p>

      <source><![CDATA[
    db-torque/
      profile/         <--- testing profiles
      src/             <--- sources
        conf/          <--- runtime configuration
        generator/     <--- home of torque-gen
          src/         <--- sources
            conf/      <--- generator configuration and ant buildfile
            dtd/       <--- DTD for schema.xml files
            java/      <--- java sources for generator
            schema/    <--- needed schema files (IDBroker)
            templates/ <--- templates for sql- and om- generation
            test/      <--- junit tests
          xdocs/       <--- docs for generator in anakia xml format
        java/          <--- java sources for runtime
        maven-plugin   <--- home of maven-plugin
          xdocs/       <--- docs for maven-plugin in anakia xml format
        rttest/        <--- sources for the runtime tests
        test/          <--- junit tests
      xdocs/           <--- docs for runtime in anakia xml format
      ]]></source>
    </section>

    <section name="Building from SVN">
      <p>
        The Torque build process uses
        <a href="http://maven.apache.org">Maven</a>.  Before you begin, you'll 
        need to check out the <code>db-torque</code> SVN repository (if you are 
        not familiar with the Apache SVN repositories, please refer to the
        <a href="http://www.apache.org/dev/version-control.html">documentation</a>).
        Specific information for Torque is available on the 
        <a href="cvs-usage.html">Source Repository</a> page.
      </p>
      <p>
        To build the Torque generator jar, first execute 
        <code>maven jar:install</code> in the 
        <code>src/generator/src/templates</code> directory to install a copy 
        of the templates jar in your local Maven repository. Note that
        <code>maven jar:jar</code> does not suffice here because the 
        main generator jar depends upon the template jar.
        Afterwards, execute <code>maven jar:jar</code> in the src/generator
        directory to build the generator jar (<code>maven jar:install</code> 
        to install a copy of the jar in your local Maven repository).
      </p>
      <p>
        To build and install the Torque maven-plugin execute <code>maven 
        plugin:install</code> in the <code>src/maven-plugin</code> directory.
      </p>
      <p>
        To build the Torque runtime jar execute <code>maven jar:jar</code> in 
        the root directory of the project (<code>maven jar:install</code> to
        install a copy of the jar in your local Maven repository).
      </p>
    </section>

    <section name="Testing">
      <p>
        You must define a profile in your <code>${user.home}/build.properties
        </code> file
      </p>

      <source><![CDATA[
    torque.testProfile=profile/oracle.profile
      ]]></source>

      <p>
        Edit the profile to match your database settings. To start the runtime
        tests simply type:
      </p>

      <source><![CDATA[
    maven runtime:test
      ]]></source>

      <p>
        Please report any problems to the 
        <a href="mailto:torque-dev@db.apache.org">torque-dev</a> mailing list.
      </p>

    </section>

    <section name="Initialisation of the Torque Runtime">
      <p>
        This section is meant to to provide some insight into the initialisation procedure
        of Torque.
        On initialisation, Torque needs to provide the following resources to work properly
        <ul> 
          <li>
            The name of the default database, configured by the key
            torque.database.default
          </li> 
          <li>
            The adapters, configured by the keys 
            torque.database.&lt;databaseName&gt;.adapter
          </li> 
          <li>
            The DataSourceFactories, configured by the keys
            torque.dsfactory.&lt;databaseName&gt;.&lt;property&gt;. 
            For some DataSourceFactories, default values can be defined under
            torque.defaults.&lt;property&gt;.
          </li>
          <li>
            The Database maps. Each peer class registers its Map builder with the Torque
            runtime when the Base Peer Class is loaded (Usually, a peer class is loaded 
            if one of the constants for a column name is accessed, or a method
            is called). If Torque is already initialized when the Peer class is loaded
            (this is usually the case) the Map Builder builds the database map instantly 
            and makes it avaliable to Torque. If Torque is not yet initialized,
            the Peer class stores the Map Builder with Torque, which builds the database
            Map when Torque is initialized.
          </li>
          <li>
            The managers. These are not used in most setups.
          </li>
        </ul>
      </p>
      
    </section>
    
    <section name="Internal resources used by the Torque Runtime">
    
      <subsection name="Default database name">
        <p>
          Torque can be used with several databases at once. The resources for each
          database are usually kept in Maps where the key is the name of the database.
          To make things easier for people who use only one database, Torque supports
          the notion of a default database. This allows it to provide convenience 
          methods like Torque.getConnection() where no database name must be specified. 
          These methods refer to the default database, in contrast to e.g.
          Torque.getConnection(String) where the name of the database must be supplied
          explicitly.
        </p>
      </subsection>
    
      <subsection name="Adapters">
        <p>
          Although all databases supported by Torque understand SQL, there are 
          differences in the behaviour of the databases which the Torque runtime
          needs to know about. For example, the standard (String) format of a date
          object in an oracle9i database is different from a postgresql database.
          The adapter for a database provides the necessary methods to hide such
          differences from the user. 
          For example, the adapter provides a method to create a String in the 
          database's preferred format from a Date object.
        </p>
        
        <p>
          Adapters are subclasses of the org.apache.torque.adapter.DB class.
          The adapters are stored in the private map TorqueInstance.apdapterMap; 
          the key of the map is the name of the database (e.g. "bookstore"), and the
          value of the map is the adapter. The adapter for a given key
          can be retrieved via the method Torque.getDB(key).
        </p>
      </subsection>

      <subsection name="DataSourceFactories">
        <p>
          To access a database, a connection must be made to the database.
          A DataSource is an object which can provide Connections to the database.
          A DataSourceFactory is used to configure and provide one DataSource.
        </p>
        
        <p>
          DataSourceFactories must implement the interface
          org.apache.torque.dsfactory.DataSourceFactory.
          The DataSourceFactories are stored in the private map 
          TorqueInstance.dsFactoryMap; the key of the map is the 
          name of the database (e.g. "bookstore"), and the
          value of the map is the DataSourceFactory. 
          The DataSourceFactory for a given key
          can not be retrieved by a public method; however, a connection 
          from the DataSource for the DataSourceFactory for a given key
          can be obtained by Torque.getConnection(key);
        </p>
      </subsection>
      
      <subsection name="Database maps">
        <p>
          Torque sometimes needs to know internals about the structure of the
          database, e.g. which table contains which columns etc.
          This knowledge is kept in the database maps. 
        </p>
        
        <p>
          Database Maps are instances of the class org.apache.torque.map.DatabaseMap.
          They are kept in the instance variable TorqueInstance.dbMaps. The Map
          for the database with the name key can be retrieved by the method 
          Torque.getDatabaseMap(key).
        </p>
      </subsection>
      
    </section>
    
  </body>
</document>
