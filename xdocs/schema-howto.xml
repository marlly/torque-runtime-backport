<?xml version="1.0"?>

<document>
 <properties>
  <title>Database Schema Howto</title>
  <author email="hps@intermeta.de">Henning P. Schmiedehausen</author>
 </properties>

<body>

<section name="Using Database Schemas (Namespaces)">

<p>
The word &quot;Schema&quot; is unfortunately quite overloaded with
Torque. In this document, we will briefly talk about Database
namespaces called Schema, as described <a
href="http://www.postgresql.org/docs/7.3/static/ddl-schemas.html">in
the PostgreSQL documentation</a>. According to the docs, Schemas are a
part of the SQL standard. YMMV, however.</p>

<p>
Torque has some rudimentary support for Database schemas when
accessing a database. Schema names can either be specified when
generating classes via the generator, or they can be specified
in the runtime. Note that specifying explicit schema names both at 
generate time and at runtime is not tested and most likely causes problems.
</p>

</section>

<section name="Configuring Schema Names at Runtime">

<p>
Schema support happens &quot;per-DataSourceFactory&quot;. This might
look counter-intuitive to you but is actually the easiest way to get
this done. In the <code>torque.properties</code> file you can add use
the following statements:
</p>

<source><![CDATA[
##
## Selecting a database schema for all data sources:
##

# All data sources use the public schema unless overridden
torque.defaults.schema = public

##
## Selecting the schema 'foo' for the datasource "bar"

# use the foo datasource
torque.dsfactory.bar.schema = foo
]]>
</source>

<p>
If no schema is configured in the torque properties, Torque will not
qualify its table names. 
</p>

</section>

<section name="Changing the current Schema on the fly">

<p>
The schema support happens per-Datasource. However, the schema name is
queried dynamically whenever a Torque command accesses the database
and can be changed (if you have the same table layout on multiple
schemas, you can reuse your Peer classes thus reducing the number of
classes used).
</p>

<source><![CDATA[

/* Set the schema name for datasource "bar" to "foo" */

Torque.setSchema("bar", "foo");

/* Reset the schema names (no longer qualify 
 * accesses to the tables of the "bar" datasource
 */
Torque.setSchema("bar", null);

/* Get the current schema for the "bar" data source */
String barSchema = Torque.getSchema("bar");
]]>
</source>

</section>

  <section name="Using Schema Names at generate time">

    <p>
      To define the schema of a table in the schema.xml, use the 
      fully qualified table name as name attribute in the &lt;table&gt; 
      element of your schema.xml.
      For example, to use the schema "bookstore" for the table "book", 
      use the following table definition:
    </p>

    <source><![CDATA[
...
<table name="bookstore.book" description="Book table">
...
]]>
    </source>

    <p>
      If the standard naming method is used, the resulting 
      java class will be named BookstoreBook. If you want to omit 
      the schema name in the java name 
      (i.e. the resulting java class should be named "Book"),
      you can either use the javaName attribute of the table definition:
    </p>

    <source><![CDATA[
...
<table name="bookstore.book" javaName="Book" description="Book table">
...
]]>
    </source>

    <p>
      or you can use the attribute 
      defaultJavaNamingMethod="underscoreOmitSchema"
      in the database definition:
    </p>

    <source><![CDATA[
...
<database name="bookstore" defaultJavaNamingMethod="underscoreOmitSchema">
...
]]>
      </source>

    <p>
      Note that the defaultJavaNamingMethod attribute of a table 
      will only affect the column names in the table and cannot 
      be used to change the name of the table itself.
    </p>

    <p>
      If you use a sequence to autogenerate ids, the sequence will be generated in the same schema 
      as the table.
    </p>

  </section>

 </body>
</document>
