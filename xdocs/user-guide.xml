<?xml version="1.0"?>
<!--
 Copyright 2001-2005 The Apache Software Foundation.

 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>

  <properties>
    <title>Torque User's Guide</title>
    <author email="jvanzyl@apache.org">Jason van Zyl</author>
    <author email="mpoeschl@marmot.at">Martin Poeschl</author>
    <author email="seade@backstagetech.com.au">Scott Eade</author>
  </properties>

  <body>

<section name="Table of Contents">

<p>
  <ol>
    <li>
      <a href="#About this Guide">About this Guide</a>
    </li>
    <li>
      <a href="#Torque components">Torque components</a>
    </li>
    <li>
      <a href="#Installing Torque">Installing Torque</a>
    </li>
    <li>
      <a href="#Quick Start Guide">Quick Start Guide</a>
    </li>
  </ol>
</p>

</section>

<section name="About this Guide">

<p>
  This User Guide is intended to help those who want
  to incorporate Torque into their project to provide a means
  of persistence for application objects.
</p>

</section>

<section name="Torque components">

<p>
  Torque consists of two main components:
  <ul>
    <li>
      <a href="/generator/">Generator</a> - The Torque generator uses a single XML
      database schema file to generate the SQL for your target database and
      Torque's Peer-based object relational model.  The generator can be
      executed using the Torque <a href="/maven-plugin/">maven-plugin</a> or
      an <a href="http://ant.apache.org/">Ant</a> build file.
    </li>
    <li>
      <a href="/">Runtime</a> - The Torque runtime is required in order to
      compile and use of the classes produced by the generator.
    </li>
  </ul>
</p>

</section>

<section name="Installing Torque">

<subsection name="Generator with the Maven plugin">

<p>
  If you have not already done so, download and install
  <a href="http://maven.apache.org/">Maven</a>.  You then need to obtain the
  Torque maven plugin.  The <a href="../maven-howto.html">Maven Howto</a>
  includes details of how to build the maven plugin from source, but you can
  easily install a binary distribution thus:
</p>

<source><![CDATA[
maven plugin:download -DartifactId=maven-torque-plugin -DgroupId=torque -Dversion=3.2-rc1
]]></source>


</subsection>

<subsection name="Generator with the Ant build file">

<p>
  If you prefer to use <a href="http://ant.apache.org/">Ant</a> you need access
  to the Torque generator distribution and associated libraries - these are
  available from the
  <a href="http://jakarta.apache.org/builds/jakarta-turbine/torque/release/3.2-rc1/">
  Downloads page</a> (the file to download is torque-gen-3.2-rc1.tar.gz or
  torque-gen-3.2-rc1.zip, depending on your development platform).  Unpack the
  archive to reveal the following directory structure:
</p>

<source><![CDATA[
torque-gen-3.1.1/
    docs/              <--- Contains a copy of the Torque documentation,
                            including the API JavaDocs.
    lib/               <--- Contains the jar files required by the Torque
                            generator, including the torque-gen-templates
                            jar containing the templates. If you want to
                            modify the templates, you can unpack the
                            templates jar, set the
                            <code>torque.useClasspath</code> to
                            <code>false</code>
                            and the <code>torque.schema.dir</code>
                            to the correct directory in the
                            <code>build.properties</code>
    src/schema/        <--- Contains the schema for the table used by Torque's
                            IDBroker.
    build.properties   <--- The various properties that you use to configure
                            the Torque generator.
    build-torque.xml   <--- The Ant build file containing the various torque
                            goals.
    default.properties <--- The default property values that are used to
                            configure the Torque generator.
    LICENSE.txt        <--- The License for the Torque generator.
    torque-gen-3.2-rc1.jar
                       <--- The generator jar.
]]></source>

<p>
  The instructions below are targeted towards using the Torque maven-plugin.
  If you are using Ant the instructions are basically the same, but instead of
  using <code>project.properties</code> you use <code>build.properties</code>
  and instead of using <code>maven torque:${goal-name}</code> you use
  <code>ant -f build-torque.xml ${target-name}</code>.
</p>

</subsection>

<subsection name="Runtime">

<p>
  At runtime the generated object model classes need access to the Torque
  runtime distribution and associated libraries - these are available from the
  <a href="http://jakarta.apache.org/builds/jakarta-turbine/torque/release/3.1.1/">
  Downloads page</a> (the file to download is torque-3.1.1.tar.gz or
  torque-3.1.1.zip, depending on your development platform).  We will cover
  what to do with this file in a later step.
</p>

</subsection>

</section>

<section name="Quick Start Guide">

<p>
  For those who just want to see Torque here we will race our way through all
  that needs to be done to define, generate and use a Torque object model.
</p>

<subsection name="Configure Torque Generator (project.properties)">

<p>
  For a complete list of generator properties, please refer to the
  <a href="generator/properties-reference.html">properties reference</a>. Below
  is a short list of the primary properties you should be interested in.
</p>

<table>
  <tr>
    <td>torque.project</td>
  </tr>
  <tr>
    <td>torque.database</td>
  </tr>
  <tr>
    <td>torque.targetPackage</td>
  </tr>
  <tr>
    <td>torque.database.createUrl</td>
  </tr>
  <tr>
    <td>torque.database.buildUrl</td>
  </tr>
  <tr>
    <td>torque.database.url</td>
  </tr>
  <tr>
    <td>torque.database.driver</td>
  </tr>
  <tr>
    <td>torque.database.user</td>
  </tr>
  <tr>
    <td>torque.database.password</td>
  </tr>
  <tr>
    <td>torque.database.host</td>
  </tr>
</table>

</subsection>

<subsection name="Define Database Schema (project-schema.xml)">

<p>
  This is an example of what the XML database schema might look like. This
  particular example is a snippet of the database used for role-based
  user system of <a href="http://jakarta.apache.org/turbine/">Turbine</a>.
</p>

<source><![CDATA[
<database name="my_project">

  <table name="ID_TABLE">
    <column name="ID_TABLE_ID" required="true" primaryKey="true" type="INTEGER"/>
    <column name="TABLE_NAME" required="true" size="255" type="VARCHAR"/>
    <column name="NEXT_ID" type="INTEGER"/>
    <column name="QUANTITY" type="INTEGER"/>

    <unique>
      <unique-column name="TABLE_NAME"/>
    </unique>

  </table>

  <table name="TURBINE_PERMISSION" idMethod="idbroker">
    <column name="PERMISSION_ID" required="true" primaryKey="true" type="INTEGER"/>
    <column name="PERMISSION_NAME" required="true" size="99" type="VARCHAR" javaName="Name"/>

    <unique>
      <unique-column name="PERMISSION_NAME"/>
    </unique>

  </table>

  <table name="TURBINE_ROLE_PERMISSION">
    <column name="ROLE_ID" required="true" primaryKey="true" type="INTEGER"/>
    <column name="PERMISSION_ID" required="true" primaryKey="true" type="INTEGER"/>

    <foreign-key foreignTable="TURBINE_ROLE">
      <reference local="ROLE_ID" foreign="ROLE_ID"/>
    </foreign-key>

    <foreign-key foreignTable="TURBINE_PERMISSION">
      <reference local="PERMISSION_ID" foreign="PERMISSION_ID"/>
    </foreign-key>
  </table>

</database>
]]></source>

<p>
  Please refer to <a href="generator/schema-reference.html">Torque Schema Reference</a>
  to find out more about the the different elements and attributes.
</p>

</subsection>

<subsection name="Torque Runtime Configuration (Torque.properties)">

<p>
  The runtime distribution archive includes an Ant build file that can be used
  to generate your Torque runtime configuration - see the Torque
  <a href="tutorial/step2.html#Torque_Run-Time_Properties">tutSorial</a> for
  details.
</p>

<source><![CDATA[
torque.database.default = my_project
torque.database.my_project.adapter = mysql

# Using commons-dbcp
torque.dsfactory.my_project.factory = org.apache.torque.dsfactory.SharedPoolDataSourceFactory
torque.dsfactory.my_project.connection.driver = org.gjt.mm.mysql.Driver
torque.dsfactory.my_project.connection.url = jdbc:mysql://localhost:3306/my_project
torque.dsfactory.my_project.connection.user = user
torque.dsfactory.my_project.connection.password = password
  ]]></source>

  <p>
    The above example uses the commons-dbcp connection pool - see
    <a href="configuration-howto.html">Pool-config Howto</a>
    details of the available <code>DataSource</code> factories.
  </p>

</subsection>

<subsection name="Add Libraries">

  <p>
    In order to be able to compile and use the generated class files it is
    necessary to include the Torque runtime jar file and jar files for all of
    the necessary dependencies in the classpath of your project.  The necessary
    jars are included in the <code>torque/lib</code> directory of the Torque
    runtime.  If you are using Maven to build your project it may be easiest to
    copy the necessary <a href="../dependencies.html">dependencies</a> from the
    <a href="http://cvs.apache.org/viewcvs.cgi/db-torque/project.xml?only_with_tag=TORQUE_3_1_BRANCH">Torque
    runtime POM</a>.
  </p>

</subsection>

<subsection name="Object Model and SQL Generation">

<p>
  Generate the object model and associated SQL:
</p>

<source><![CDATA[
maven torque
]]></source>

<p>
  <b>
    Note: Torque will <em>drop</em> the database and
    tables that it is about to create if they exist!
    You should skip the next two steps if you are working
    with an existing database full of data.
  </b>
</p>

<p>
  To creating the database:
</p>

<source><![CDATA[
maven torque:create-db
]]></source>

<p>
  To create the tables:
</p>

<source><![CDATA[
maven torque:id-table-init-sql
maven torque:insert-sql
]]></source>

</subsection>

<subsection name="Using the Torque Object Model Classes">

<p>
  The following is an example of using the Torque object model classes - it is
  adapted from the Torque <a href="tutorial/">tutorial</a>.
</p>

<source><![CDATA[
import java.util.*;
import ...om.*;
import org.apache.torque.Torque;
import org.apache.torque.util.Criteria;

public class Bookstore
{
    public static void main(String[] args)
    {
        try
        {
            /* Initialize Torque */
            Torque.init("Torque.properties");

            /* Creating new objects */
            Publisher addison = new Publisher();
            addison.setName("Addison Wesley Professional");
            addison.save();

            Author bloch = new Author();
            bloch.setFirstName("Joshua");
            bloch.setLastName("Bloch");
            bloch.save();

            /* Foreign keys provided using convenience methods and manually. */
            Book tcpip = new Book();
            tcpip.setTitle("TCP/IP Illustrated, Volume 1");
            tcpip.setISBN("0-201-63346-9");
            effective.setPublisher(addison);
            tcpip.setAuthorId(stevens.getAuthorId());
            tcpip.save();

            /* Selecting all books */
            List booklist = BookPeer.doSelectAll();
            // iterate over booklist, casting the items to Book

            /* Selecting specific objects */
            Criteria crit = new Criteria();
            crit.add(BookPeer.ISBN, "0-201-63346-9");
            booklist = BookPeer.doSelect(crit);
            // iterate over booklist, casting the items to Book

            /* Updating data */
            effective.setAuthor(stevens);
            effective.save();

            tcpip.setAuthor(bloch);
            BookPeer.doUpdate(tcpip);

            /* Deleting data */
            crit = new Criteria();
            crit.add(BookPeer.ISBN, "0-618-12902-2");
            BookPeer.doDelete(crit);

            crit = new Criteria();
            crit.add(BookPeer.ISBN, "0-201-63346-9");
            crit.add(BookPeer.TITLE, "TCP/IP Illustrated, Volume 1");
            BookPeer.doDelete(crit);

            AuthorPeer.doDelete(bloch);
            AuthorPeer.doDelete(stevens);
            PublisherPeer.doDelete(addison);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }
}
  ]]></source>

</subsection>

</section>

<!--

<p>
  This is what the resultant SQL looks like, in the case the target database is
  <a href="http://www.mysql.com">MySQL</a>:
</p>

<source><![CDATA[
drop table if exists ID_TABLE;
CREATE TABLE ID_TABLE
(
    ID_TABLE_ID integer NOT NULL,
    TABLE_NAME varchar(255) NOT NULL,
    NEXT_ID integer,
    QUANTITY integer,
    PRIMARY KEY(ID_TABLE_ID),
    UNIQUE(TABLE_NAME)
);

drop table if exists Jobentry;
CREATE TABLE Jobentry
(
    OID integer NOT NULL,
    MINUTE integer default -1 NOT NULL,
    HOUR integer default -1 NOT NULL,
    WEEKDAY integer default -1 NOT NULL,
    DAY_OF_MONTH integer default -1 NOT NULL,
    TASK varchar(99) NOT NULL,
    EMAIL varchar(99),
    PRIMARY KEY(OID)
);
]]></source>

<p>
  This is what the sources look like for the Peer based object model:
</p>

<p>
  <ul>
    <li>BaseObjects
      <ul>
        <li><a href="resources/IdTable.java">IdTable.java</a></li>
        <li><a href="resources/Jobentry.java">Jobentry.java</a></li>
      </ul>
    </li>

    <li>Peers
      <ul>
        <li><a href="resources/IdTablePeer.java">IdTablePeer.java</a></li>
        <li><a href="resources/JobentryPeer.java">JobentryPeer.java</a></li>
      </ul>
    </li>

    <li>MapBuilders
      <ul>
        <li><a href="resources/IdTableMapBuilder.java">IdTableMapBuilder.java</a></li>
        <li><a href="resources/JobentryMapBuilder.java">JobentryMapBuilder.java</a></li>
      </ul>
    </li>
  </ul>
</p>

<p>
  Please refer to <a href="getting-started.html">Getting Started</a> to find out
  more about the Peer based object model.
</p>

<p>
  This is what the HTML description of the database looks like:
</p>

<table>
  <tr>
    <td colspan="3">
      <strong>
      <font face="Lucida,Verdana,Helvetica,Arial" color="white">ID_TABLE</font>
      </strong>
    </td>
  </tr>
  <tr>
    <td>Column</td><td>Type</td><td>Size</td>
  </tr>
  <tr>
    <td>ID_TABLE_ID</td><td >INTEGER</td><td>&#160;</td>
  </tr>
  <tr>
    <td>TABLE_NAME</td><td >VARCHAR</td><td >255&#160;</td>
  </tr>
  <tr>
    <td>NEXT_ID</td><td >INTEGER</td><td >&#160;</td>
  </tr>
  <tr>
    <td>QUANTITY</td><td >INTEGER</td><td >&#160;</td>
  </tr>

</table>

<table>
  <tr>
    <td colspan="3">
      <strong>
      <font face="Lucida,Verdana,Helvetica,Arial" color="white">Jobentry</font>
      </strong>
    </td>
  </tr>
  <tr><td>Column</td><td>Type</td><td>Size</td>
  </tr>
  <tr>
    <td>JOBID</td><td >INTEGER</td><td>&#160;</td>
  </tr>
  <tr>
    <td>MINUTE</td><td >INTEGER</td><td>&#160;</td>
  </tr>
  <tr>
    <td>HOUR</td><td >INTEGER</td><td>&#160;</td>
  </tr>
  <tr>
    <td>WEEKDAY</td><td >INTEGER</td><td>&#160;</td>
  </tr>
  <tr>
    <td>DAY_OF_MONTH</td><td >INTEGER</td><td>&#160;</td>
  </tr>
  <tr>
    <td>TASK</td><td >VARCHAR</td><td >99&#160;</td>
  </tr>
  <tr>
    <td>EMAIL</td><td >VARCHAR</td><td >99&#160;</td>
  </tr>

</table>
-->

  </body>
</document>
