<?xml version="1.0"?>

<document>
  <properties>
    <title>Torque Tutorial - Step 2: Configuring Torque</title>
    <author email="pete-apache-dev@kazmier.com">Pete Kazmier</author>
    <author email="seade@backstagetech.com.au">Scott Eade</author>
  </properties>
  <body>

<section name="Step 2: Configuring Torque">

<p>
  The following section outlines the necessary steps to
  define your database schema and configure Torque to use
  your schema.  Upon completion, you'll be able to use
  Torque to create your object model and all of the Java
  classes that support it.  In addition, Torque can
  generate and execute all of the appropriate SQL commands
  to create your database, freeing you from having to do it
  manually.
</p>

<p>
  To accomplish all of the above, you only need to
  create/edit three files: the Torque generator properties,
  the Torque database schema, and the Torque run-time
  properties.  Each of these files is covered in the
  following sections.
</p>

</section>

<section name="Torque Generator Properties">

<p>
  Torque is a system that literally generates Java
  source/class files representing your object model,
  SQL statements for your specific database, and
  documentation.  To accomplish these tasks, it uses
  <a href="http://maven.apache.org/">Maven</a> and
  the Torque <a href="../maven-plugin/">maven-plugin</a>
  to drive the Torque <a href="../generator/">generator</a>.
  You configure the generator by setting properties in the
  <em>project.properties</em> file in root directory of your 
  project - this is the file that we will edit first.
</p>

<source><![CDATA[
  # The name of the project Torque will generate code for.
  torque.project = bookstore

  # The target database platform.
  torque.database = mysql

  # The target package to put the generated classes in.
  torque.targetPackage = com.kazmier.om

  # The JDBC URL that Torque can use to create and 
  # drop databases if instructed to do so.
  torque.database.createUrl = jdbc:mysql://127.0.0.1/mysql

  # The JDBC URL that will be used to create tables in your database.
  torque.database.buildUrl = jdbc:mysql://127.0.0.1/bookstore

  # The JDBC URL that will be used to access your database.
  torque.database.url = jdbc:mysql://127.0.0.1/bookstore

  # The JDBC database driver to use when connecting to your database.
  torque.database.driver = org.gjt.mm.mysql.Driver

  # The administrative username that has sufficient privileges to create 
  # and drop databases and tables that Torque executes at generation time.
  torque.database.user = adminuser

  # The administrative password for the supplied username.
  torque.database.password = adminpassword

  # The hostname or IP address of your database server.
  torque.database.host = 127.0.0.1

  # The location of the your *-schema.xml files (see below).
  #torque.schema.dir = ./schema
]]></source>

<p>
  For a reference as to what each property, and others, controls, please
  see the <a href="../generator/properties-reference.html">properties 
  reference</a>.
</p>

<p>
  Setting these properties correctly is very
  important.  These enable Torque to generate all of
  the required sources and SQL for your specific
  database.  If you experience problems later in this
  tutorial, it would be wise to double-check these
  values.
</p>

<subsection name="Customizing the Generator Templates">
<p>
  The object model class files generated by Torque are produced using a set of
  <a href="http://jakarta.apache.org/velocity/">Velocity</a> templates that are 
  included in the torque-gen jar file.  If you want to customise the templates 
  that are used to generate your object model class files you can either build
  your own customised version of the torque-gen jar file and install it in 
  your local Maven repository or use additional properties to tell the 
  maven-plugin where to find your customised templates.
</p>
</subsection>

</section>

<section name="Torque Database Schema">

<p>
  The second file that you must edit to configure
  Torque is the database schema.  The database schema
  is an XML file that represents your SQL database in
  Torque.  This is where you define all of your
  tables, column names and types, as well as the keys
  used to index these tables.
</p>

<p>
  By default your database schema file should be located in the
  <em>schema</em> directory under the base of your project, but
  you can tell Torque where to find it using the 
  <code>torque.schema.dir</code> property in 
  <code>project.properties</code> (the <code>torque.home</code>
  property can also be used to point to the parent of the 
  <em>schema</em> directory.  Here you will
  create two XML files: <em>id-table-schema.xml</em> and
  <em>project-schema.xml</em>.  The
  <em>id-table-schema.xml</em> file is used internally
  by Torque's IDBroker service (which is a database
  independent method for generating unique IDs).
  <em>project-schema.xml</em> is where you'll define
  your database schema.  Historically, the name of
  your database schema file was required to be in the
  format of <em>name-schema.xml</em> where
  <em>name</em> was the same as the <em>project</em>
  property defined in <em>project.properties</em>;
  otherwise, Torque was not able to find your
  database schema file.  This is no longer the case,
  <em>name</em> is no longer restricted to the project
  name. However, it must end with
  &#145;-schema.xml&#146; because Torque will only
  generate object models for files ending with that
  pattern.
</p>

<p>
  For this tutorial, we will use a simple database
  that might be used to support a bookstore
  application.  The database will contain three
  tables: author, publisher, and book.  The first
  table will contain author information (first
  and last name).  The second table will
  contain publisher information (name).  And the third
  table will contain book information (title, and
  ISBN).  The author id and publisher id will be
  foreign keys in the book table.  The schema
  representation for this database is as follows:
</p>

<source><![CDATA[
<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE database SYSTEM
 "http://db.apache.org/torque/dtd/database_3_1.dtd">

<database
  name="bookstore"
  defaultIdMethod="idbroker">

  <table name="book" description="Book Table">
    <column
      name="book_id"
      required="true"
      primaryKey="true"
      type="INTEGER"
      description="Book Id"/>
    <column
      name="title"
      required="true"
      type="VARCHAR"
      size="255"
      description="Book Title"/>
    <column
      name="isbn"
      required="true"
      type="VARCHAR"
      size="24"
      javaName="ISBN"
      description="ISBN Number"/>
    <column
      name="publisher_id"
      required="true"
      type="INTEGER"
      description="Foreign Key Publisher"/>
    <column
      name="author_id"
      required="true"
      type="INTEGER"
      description="Foreign Key Author"/>
    <foreign-key foreignTable="publisher">
      <reference
        local="publisher_id"
        foreign="publisher_id"/>
    </foreign-key>
    <foreign-key foreignTable="author">
      <reference
        local="author_id"
        foreign="author_id"/>
    </foreign-key>
  </table>
  <table name="publisher" description="Publisher Table">
    <column
      name="publisher_id"
      required="true"
      primaryKey="true"
      type="INTEGER"
      description="Publisher Id"/>
    <column
      name="name"
      required="true"
      type="VARCHAR"
      size="128"
      description="Publisher Name"/>
  </table>
  <table name="author" description="Author Table">
    <column
      name="author_id"
      required="true"
      primaryKey="true"
      type="INTEGER"
      description="Author Id"/>
    <column
      name="first_name"
      required="true"
      type="VARCHAR"
      size="128"
      description="First Name"/>
    <column
      name="last_name"
      required="true"
      type="VARCHAR"
      size="128"
      description="Last Name"/>
  </table>
</database>
]]></source>

<p>
  Edit <em>project-schema.xml</em> to reflect the
  above database schema.  If you would rather create
  your own schema file, be sure the filename ends in
  &#145;-schema.xml&#146;, and delete
  <em>project-schema.xml</em> because Torque will
  generate an object model for that file as well.  Do
  not delete <em>id-table-schema.xml</em> if you plan
  on using Torque's IDBroker service, which is used in
  this tutorial.
</p>

<p>
  There are several items of importance to note.  The
  <em>database</em> element's <em>name</em> attribute
  must be the same as the database name specified by
  the <em>databaseUrl</em> property in
  <em>project.properties</em>; likewise, the run-time
  properties (described in the next section) should
  also reflect this value.  Failure to do so will
  prevent Torque from creating your database tables
  (if instructed to do so) or prevent your object
  model from working properly.
</p>

<p>
  Another item of importance is the <em>database</em>
  element's <em>defaultIdMethod</em> attribute.  This
  attribute specifies the default method that Torque
  will use to generate IDs for primary keys (columns
  with the <em>primaryKey</em> attribute set to
  <em>true</em>: <em>book_id</em>,
  <em>publisher_id</em>, and <em>author_id</em>) in
  your database tables.  There are several possible
  values:
</p>

<table>
  <tr>
    <th>Property</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>idbroker</td>
    <td>
      Instructs Torque to use its
      <a href="../peers-howto.html#ID_Broker">IDBroker</a>
      service to generate IDs in a database agnostic
      manner.  This is the method that will be
      used in this tutorial.
    </td>
  </tr>
  <tr>
    <td>native</td>
    <td>
      Instructs Torque to use the underlying
      database's mechanism to generate IDs (varies
      per database).
    </td>
  </tr>
  <tr>
    <td>none</td>
    <td>
      Instructs Torque to not generate IDs.  This
      can be useful in some situations (an example
      is described below).
    </td>
  </tr>
  <tr>
    <td>autoincrement</td>
    <td>
      This method has been deprecated.  Use the
      <em>native</em> method instead.
    </td>
  </tr>
  <tr>
    <td>sequence</td>
    <td>
      This method has been deprecated.  Use the
      <em>native</em> method instead.
    </td>
  </tr>
</table>

<p>
  The <em>defaultIdMethod</em> selected will be used
  for all tables in your schema unless an individual
  <em>table</em> element contains the
  <em>idMethod</em> attribute, in which case, its
  value will override the <em>defaultIdMethod</em>.
  <em>idMethod</em> takes the same values as
  <em>defaultIdMethod</em>.
</p>

<p>
  One common reason that a table might override the
  <em>defaultIdMethod</em> is when a table is composed
  only of foreign keys (i.e. a &#145;junction
  entity&#146; in database-speak).  In this case, all
  columns should be defined as primary keys because
  they are all needed to declare a row as unique.
  However, Torque should not generate primary key IDs
  for objects in this table because the objects that
  compose the table already have primary key IDs.
  Thus, the <em>idMethod</em> attribute of the table
  must be set to <em>none</em>.  For example, if the
  <em>book</em> table defined above did not have any
  additional attributes other than a
  <em>publisher_id</em> and <em>author_id</em>, the
  schema for the <em>book</em> table should be defined
  as:
</p>

<source><![CDATA[
  <table name="book" idMethod="none" description="Book Table">
    <column
      name="publisher_id"
      required="true"
      primaryKey="true"
      type="INTEGER"
      description="Foreign Key Publisher"/>
    <column
      name="author_id"
      required="true"
      primaryKey="true"
      type="INTEGER"
      description="Foreign Key Author"/>
    <foreign-key foreignTable="publisher">
      <reference
        local="publisher_id"
        foreign="publisher_id"/>
    </foreign-key>
    <foreign-key foreignTable="author">
      <reference
        local="author_id"
        foreign="author_id"/>
    </foreign-key>
  </table>
]]></source>

<p>
  Another common mistake is to forget that XML is
  <b>case-sensitive</b>.  All of the elements and
  attributes must be specified according to the
  <a href="/torque/dtd/database_3_1.dtd">DTD</a>
  for the database schema.  In addition, you must
  include the XML declaration and DTD specification in
  your database schema file.  Failure to do so can
  result in errors.
</p>

<p>
  Finally, you must also edit (or add if its not
  present) the <em>name</em> attribute to the
  <em>database</em> element in
  <em>id-table-schema.xml</em>.  The value should be
  identical to the value in your database schema file.
  This will instruct Torque to create
  <em>id-table</em> in the same database as your
  schema.  Below is the file used in this example:
</p>

<source><![CDATA[
<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE database SYSTEM
 "http://db.apache.org/torque/dtd/database_3_1.dtd">

<database name="bookstore">
  <table name="ID_TABLE" idMethod="idbroker">
    <column
      name="ID_TABLE_ID"
      required="true"
      primaryKey="true"
      type="INTEGER"/>
    <column
      name="TABLE_NAME"
      required="true"
      size="255"
      type="VARCHAR"/>
    <column
      name="NEXT_ID"
      type="INTEGER"/>
    <column
      name="QUANTITY"
      type="INTEGER"/>
    <unique>
      <unique-column name="TABLE_NAME"/>
    </unique>
  </table>
</database>
]]></source>

<p>
  Torque uses the database schema files to generate
  your object model and Java classes to support it.
  In addition, Torque generates SQL that can be used
  to create your databases and tables from these
  schemas.  In the next section, we will conclude the
  configuration of Torque by editing the Torque
  run-time properties.  For additional information on
  the XML elements and attributes, please refer to the
  <a href="../generator/schema-reference.html">
  Torque Schema Reference</a>.
</p>

</section>

<section name="Torque Run-Time Properties">

<p>
  The last step in the configuration of Torque are the
  Torque run-time properties.  As the name suggests,
  these properties are used when your application is
  executing the object model code generated by Torque.
  The run-time properties control logging and database
  parameters such as drivers, usernames, and
  passwords.  These properties can be saved in any
  file because your application must explicitly
  initialize Torque (as you'll see later in this
  tutorial).
</p>

<p>
  The runtime distribution archive includes an Ant build file that can be used 
  to generate your Torque runtime configuration.  When you unpack the archive 
  you will see the following:
</p>

<source><![CDATA[
torque/
    database/         <--- Contains database specific property files used 
                           during the generating of runtime configuration
                           property files.
    docs/             <--- Contains a copy of the Torque documentation, 
                           including the API JavaDocs.
    lib/              <--- Contains the jar files required by the Torque 
                           runtime.
    master/build.xml  <--- The Ant build file for regenerating 
                           Torque.properties.
    master/default.prperties
                      <--- The properties that will be used when regenerating 
                           Torque.properties.
    master/Torque.master
                      <--- The unprocessed property file template.
    componentConfiguration.xml
    roleConfiguration.xml
                      <--- These are included to assist with using Torque as 
                           component in a container (e.g. one of the Avalon
                           containers).
    LICENSE.txt       <--- The License for the Torque runtime.
    README.txt        <--- Helpful information.
    Torque.properties <--- A sample generated runtime configuration file - this
                           will be replaced when you regenerate the runtime 
                           configuration.
]]></source>

<p>
  To generate Torque.properties for your project you can edit the input 
  properties in <code>master/default.properties</code> and then run 
  <code>ant</code> to regenerate <code>Torque.properties</code>.  Note that 
  the sample and generated <code>Torque.properties</code> file contains 
  a good amount of information regarding the available Torque run-time
  properties.
</p>

<p>
  For simplicity, we'll just create our own <code>Torque.propereties</code>
  file (again, this tutorial will guide you through the bare minimum to
  get your application up and running).  Create a new file
  called <em>Torque.properties</em> in the top-level directory of your
  project and add the following lines to it:
</p>

<source><![CDATA[
torque.database.default = bookstore
torque.database.bookstore.adapter = mysql

# Using commons-dbcp 
torque.dsfactory.bookstore.factory = org.apache.torque.dsfactory.SharedPoolDataSourceFactory
torque.dsfactory.bookstore.connection.driver = org.gjt.mm.mysql.Driver
torque.dsfactory.bookstore.connection.url = jdbc:mysql://localhost:3306/bookstore
torque.dsfactory.bookstore.connection.user = user
torque.dsfactory.bookstore.connection.password = password
  ]]></source>

  <p>
    We are using the commons-dbcp for our connection pool - see 
    <a href="../configuration-howto.html">Pool-config Howto</a>
    details of the available <code>DataSource</code> factories.
  </p>

  <table>
    <tr> <th>Property</th> <th>Description</th> </tr>
    <tr>
      <td>torque.database.default</td>
      <td>
        Torque has the ability to use multiple
        databases.  This property specifies which
        database is to be used as the default.
      </td>
    </tr>
    <tr>
      <td>torque.database.XXX.adapter</td>
      <td>
        Torque has the ability to deal with multiple database systems.
        This property specifies the database adapter to use.
      </td>
    </tr>
    <tr>
      <td>torque.dsfactory.XXX.factory</td>
      <td>
        The factory class that will be used to provide database connections.
      </td>
    </tr>
    <tr>
      <td>torque.dsfactory.XXX.connection.driver</td>
      <td>
        The JDBC database driver to use when
        connecting to your database.
      </td>
    </tr>
    <tr>
      <td>torque.database.XXX.connection.url</td>
      <td>
        The URL that will be used to access your
        database.  Torque's generated object model
        will perform all database operations using
        this URL.  This value should reflect the
        database name specified in your database
        schema file (see the <em>database</em>
        element's <em>name</em> attribute).
      </td>
    </tr>
    <tr>
      <td>torque.database.XXX.connection.username</td>
      <td>
        The username that has sufficient privileges
        to access your database.  This user does not
        require privileges to create and drop
        tables, unlike the username that was
        specified in <em>project.properties</em>.
      </td>
    </tr>
    <tr>
      <td>torque.database.XXX.connection.password</td>
      <td>
        The password for the specified username.
      </td>
    </tr>
  </table>

  <p>
    It is worth re-iterating that these run-time
    properties are not used by Torque when generating
    your object model and creating your database.  They
    are used only by the application utilizing the
    Torque-generated object model classes at run-time.
  </p>

  <subsection name="Logging configuration">

  <p>
    To have any logging messages sent to the console add the following
    to a file named <code>log4j.properties</code> and place this in
    your classpath (putting it in your <code>target/classes</code>
    will do the trick).
  </p>

<source><![CDATA[
log4j.rootCategory = INFO, default
log4j.appender.default = org.apache.log4j.ConsoleAppender
log4j.appender.default.layout = org.apache.log4j.SimpleLayout
]]></source>

  <table>
    <tr> <th>Property</th> <th>Description</th> </tr>
    <tr>
      <td>log4j.rootCategory</td>
      <td>
        Torque uses 
        <a href="http://jakarta.apache.org/commons/logging/">Commons 
        Logging</a>, which in turn by default uses 
        <a href="http://logging.apache.org/log4j/">Log4J</a>
        for a logging.  This parameter configures
        the Log4J system to log all messages but debug messages (use
        <code>DEBUG</code> rather than <code>INFO</code> to have get
        the debug messages too).
      </td>
    </tr>
    <tr>
      <td>log4j.appender.default</td>
      <td>
        Configures Log4J to send all logging messages to the console.
        Log4J can just as easily send all logging to a file or a
        syslog server.
      </td>
    </tr>
    <tr>
      <td>log4j.appender.default.layout</td>
      <td>
        Log4J logs messages using a layout.  Layouts
        can be very simple or complicated.  This
        tutorial uses the very rudimentary
        SimpleLayout.
      </td>
    </tr>
  </table>

  </subsection>

</section>

<section name="Torque runtime and dependant libraries">

  <p>
    In order to be able to compile and use the generated class files it is 
    necessary to include the Torque runtime jar file and jar files for all of
    the necessary dependencies in the classpath of your project.  The necessary 
    jars are included in the <code>torque/lib</code> directory of the Torque
    runtime.  If you are using Maven to build your project it may be easiest to
    copy the necessary <a href="../dependencies.html">dependencies</a> from the 
    <a href="http://cvs.apache.org/viewcvs.cgi/db-torque/project.xml?only_with_tag=TORQUE_3_1_BRANCH">Torque
    runtime POM</a>.
  </p>

  <p>
    <b>
      Note: There is no need to include the torque-gen jar file in your project
      classath, including it may adversly affect the logging configuration of 
      your application.
    </b>
  </p>

</section>

<section name="Where to next">

  <p>
    That completes the configuration of Torque.  You are now
    ready to start building your object model and creating
    your database.
  </p>
  <p>
    Next we will look <a href="step3.html">Invoking Torque</a>.
  </p>

</section>

  </body>
</document>