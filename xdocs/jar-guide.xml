<?xml version="1.0"?>

<document>

  <properties>
    <title>Torque - Running from the Jar</title>
    <author email="stephenh@chase3000.com">Stephen Haberman</author>
  </properties>

  <body>

<section name="Purpose of running Torque from a jar">

<p>
  The standard practice for using Torque has been to download the jar, unjar it
  to get the directory structure given in the <a href="user-guide.xml">user
  guide</a>, and  somehow either integrate your source tree and Torque's 
  un-jared directory  structure. While doable, this was less than desirable, 
  especially when working with prespecified directory structures, such as that
  used by Maven.
</p>

<p>
  Complex build scripts, such as <a href="http://scarab.tigris.org">Scarab's</a>, 
  which dynamically unjar Torque during the build process and copy over all the 
  correct files, can get around this, but having to re-develop or even copy such 
  capabilities on a project-by-project basis is undesirable do to the relative
  complexity.
</p>

<p>
  Instead, it is possible to run Torque without un-jaring it. All that is needed 
  is the venerable <code>build-torque.xml</code> and <code>build.properties</code>.
  Everything else can be read  from the classpath and outputted directly to the
  directories that are desired instead of the previous rigid structure.
</p>

</section>

<section name="Requirements">

<p>
  Along with the <code>build-torque.xml</code> and <code>build.properties</code>,
  you must ensure that Torque and all of it's dependencies are in the classpath. 
  For a list of dependencies, please refer to 
  <a href="http://jakarta.apache.org/turbine/torque/dependencies.html">
    dependencies.html
  </a>.
</p>

<p>
  Along with the classpath, you must edit the <code>build.properties</code>
  and set a minimum set of variables:
</p>



<p>
  <strong>Note</strong>, if you set only the above properties, Torque will default 
  to using the old directory structure to read and output files from. This
  maintains backwards compatibility, but is not always what is wanted. The next 
  section addresses telling Torque where to read and output files.
</p>

</section>

<section name="Configuring Directories">

<p>
  The following directory properties allow you to control with a good deal of
  granularity where Torque will read and output files. The table contains each 
  of the properties, along with it's default value and description.
</p>

<table>
  <tr>
    <td> Property </td>
    <td> Default </td>
    <td> Description </td>
  </tr>
  <tr>
    <td> torque.home </td>
    <td> . </td>
    <td> Serves as the base directory when defining other default directories. </td>
  </tr>
  <tr>
    <td> torque.output.dir </td>
    <td> ${torque.home}/src </td>
    <td> Serves as a general directory to output files to. </td>
  </tr>
  <tr>
    <td> torque.schema.dir </td>
    <td> ${torque.home}/schema </td>
    <td> Where the *-schema.xml files are read from. </td>
  </tr>
  <tr>
    <td> torque.doc.dir </td>
    <td> ${torque.output.dir}/doc </td>
    <td> Where the schema documentation is output. </td>
  </tr>
  <tr>
    <td> torque.java.dir </td>
    <td> ${torque.output.dir}/java </td>
    <td> Where the java files are output. </td>
  </tr>
  <tr>
    <td> torque.javadoc.dir </td>
    <td> ${torque.output.dir}/javadoc </td>
    <td> Where the javadoc files for the om classes are output. </td>
  </tr>
  <tr>
    <td> torque.ojb.dir </td>
    <td> ${torque.output.dir}/ojb </td>
    <td> Where the OJB files are output. </td>
  </tr>
  <tr>
    <td> torque.sql.dir </td>
    <td> ${torque.output.dir}/sql </td>
    <td> Where the SQL files are output. </td>
  </tr>
</table>

</section>

<section name="Invoking Torque">

<p>
Once the build properties have been set, you can invoke torque via the
<code>build-torque.xml</code>: <code>ant -f build-torque.xml</code>.
</p>

<p>
Also, a few of the Torque targets, currently om and sql, are smart enough
to not run unless the schema has changed. This would allow you to automatically
call <code>ant -f build-torque.xml</code> on each compile and only worry about
the time it takes to generate the templates being taken if the schema has
changed.
</p>

</section>

<section name="Example using Jar'd Torque and Maven">

<p>
For an example of how to integrate Torque within the build process, see the
<a href="maven-howto.html">Maven Howto</a>.
</p>

</section>

  </body>
</document>